pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx1-pod
  namespace: app-ns
  labels:
    env: prod-pod
    type: frond-end
    identifier: nginx-prod-pod
spec:
  containers:
  - name: myapp
    image: nginx
    ports:
      - containerPort: 80
---------------------------------
Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
       name: nginx-deployment
       labels:
           app: nginx-app
spec:
  replicas: 3
  selector:
    matchLabels:
      type: front-end
  template:
    metadata:
      name: nginx-pod
      labels:
        env: pod
        type: front-end
    spec:
      containers:
      - name: nginx-ctr
        image: nginx
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8080

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
      name: app-ns
      namespace: app
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
     name: spec-configmap
data:
    game.properties:
            enemies=aliens
            lives=3
            cheatcode =testing
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Configmap Execution
$ mkdir props
$ cd props
$ touch game.properties
$ vim game.properties
enemies=aliens
lives=3
enemies.cheat=true
enemies.cheat.level=noGoodRotten
secret.code.paraphrase=UDDDDDD
secret.code.allowed=true

$ vim ui.properties
color.good=purple
color.bad=yellow
color.textmode=true
how.nice.to.look=fairy

$ ls -lrt
3 ways
$kubectl create configmap myconfig --from-file=game.properties
$ kubectl create configmap myconfig01 --from-file=.
$ kubectl create configmap literal-config --from-literal=mykey=myval --from-literal=myName=Vinodh

$ kubectl describe configmap myconfig
# shows only game.properties
$ kubectl describe configmap myconfig01
# shows both ame.properties and ui,properties
$ kubectl describe configmap literal-config
# shows myname and myvalue
$ kubectl get configmaps
-----------------------------------------------------------------------------------------------------------
Using in the conept of pod

pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: myctr
      image: busybox
      command: ['sh', '-c', 'echo $(MYVAL) && sleep 3600']
      env:
        - name: MYVAL
          valueFrom:
            configMapKeyRef:
              name: literal-config1
              key: myname

    $ kubectl logs mypod 
    # Vinodh
-------------------------------------------------------------------------------------------------------------------------
By moutings the volumes
mount.yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod1
spec:
  containers:
    - name: myctr
      image: busybox
      command: ['sh', '-c', 'echo $(MYVAL) && sleep 3600']
      volumeMounts:
        - name: literal-volume
          mountPath: /etc/config
  volumes:
    - name: literal-volume
      configMap:
        name: literal-config1

EXECUTION
$ kubectl create -f mount.yaml
ubuntu@worker01:~/props$ kubectl logs mypod1
sh: MYVAL: not found
ubuntu@worker01:~/props$ kubectl exec -it mypod1 --/bin/sh
error: unknown flag: --/bin/sh
See 'kubectl exec --help' for usage.
ubuntu@worker01:~/props$ kubectl exec -it mypod1 -- /bin/sh
/ # cd etc
/etc # ls -ltr
total 40
-rw-r--r--    1 root     root           114 May 28 19:54 localtime
-rw-r--r--    1 root     root           494 Jul 17 18:30 nsswitch.conf
-rw-r--r--    1 root     root           340 Jul 17 18:30 passwd
-rw-r--r--    1 root     root           306 Jul 17 18:30 group
-rw-------    1 root     root           136 Jul 17 18:30 shadow
drwxr-xr-x    6 root     root          4096 Jul 17 18:30 network
-rw-r--r--    1 root     root           130 Nov  7 13:07 resolv.conf
-rw-r--r--    1 root     root             7 Nov  7 13:07 hostname
drwxrwxrwx    3 root     root          4096 Nov  7 13:07 config
-rw-r--r--    1 root     root           205 Nov  7 13:07 hosts
/etc # cd config
/etc/config # ls -lrt
total 0
lrwxrwxrwx    1 root     root            13 Nov  7 13:07 myname -> ..data/myname
lrwxrwxrwx    1 root     root            12 Nov  7 13:07 mykey -> ..data/mykey
/etc/config # cat mykey
myval/etc/config # cat myname
vinodh/etc/config #
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Secrets
$ kubectl create secret generic mysecret --from-literal=username=admin --from-literal=password=admin123
$ kubectl describe secret mysecret
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
specfile.yaml
apiVersion: v1
kind: Secret
metadata:
  name: spec-secret
stringData:
  username: admin
  password: admin123
  type: db
  
ubuntu@worker01:~$ kubectl get secrets
NAME          TYPE     DATA   AGE
spec-secret   Opaque   3      14s
kubectl describe secret spec-secret
Name:         spec-secret
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
password:  8 bytes
type:      2 bytes
username:  5 bytes
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Immutable secrets
$ kubectl edit secret spec-secret
TO avoid thus we are using 
apiVersion: v1
kind: Secret
metadata:
  name: spec-secret
immutable: true
stringData:
  username: admin
  password: admin123
  type: db
Now u cant able to edit it.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
specfile.yaml
apiVersion: v1
kind: Secret
metadata:
  name: spec-secret1
type: kubernetes.io/basic-auth
stringData:
  username: admin
  password: admin123
  type: db
ubuntu@worker01:~$ kubectl get secrets
NAME           TYPE                       DATA   AGE
spec-secret    Opaque                     3      7m41s
spec-secret1   kubernetes.io/basic-auth   3      43s
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
using the pod concept 
$ kubectl create secret generic mysecret --from-literal=username=admin --from-literal=password=admin123
secret.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-pod
spec:
  containers:
    - name: myctr
      image: busybox
      command: ['sh', '-c', 'echo $(MY_SECRET) && sleep 3600']
      env:
        - name: MY_SECRET
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: username
ubuntu@worker01:~$ kubectl logs secret-pod
admin
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Mounted using the volumes
secret2.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secretpod1
spec:
  containers:
    - name: myctr
      image: busybox
      command: ['sh', '-c', 'echo $(MY_SECRET) && sleep 3600']
      volumeMounts:
                   - name: config-volume
                     mountPath: /etc/secrets
      env:
        - name: MY_SECRET
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: username
  volumes:
    - name: config-volume
      secret:
        secretName: mysecret

$ kubectl get pods
ubuntu@worker01:~$ kubectl exec -it secretpod1 -- /bin/sh
/ # cd etc
/etc # ls -lrt
total 36
-rw-r--r--    1 root     root           114 May 28 19:54 localtime
-rw-r--r--    1 root     root           494 Jul 17 18:30 nsswitch.conf
-rw-r--r--    1 root     root           340 Jul 17 18:30 passwd
-rw-r--r--    1 root     root           306 Jul 17 18:30 group
-rw-------    1 root     root           136 Jul 17 18:30 shadow
drwxr-xr-x    6 root     root          4096 Jul 17 18:30 network
drwxrwxrwt    3 root     root           120 Nov  7 14:07 secrets
-rw-r--r--    1 root     root           130 Nov  7 14:07 resolv.conf
-rw-r--r--    1 root     root           209 Nov  7 14:07 hosts
-rw-r--r--    1 root     root            11 Nov  7 14:07 hostname
/etc # cd secrets
/etc/secrets # ls -lrt
total 0
lrwxrwxrwx    1 root     root            15 Nov  7 14:07 username -> ..data/username
lrwxrwxrwx    1 root     root            15 Nov  7 14:07 password -> ..data/password
/etc/secrets # cat username
admin/etc/secrets # cat password
admin123/etc/secrets #
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




      
